DELETE FROM task_template;

INSERT INTO task_template(name, task_description, task_type) VALUES ("REST API get request (following API doocumentation)", "Write a function that gets data from the API {{api_name}}. Your function should return the fields {{requested_fields}} as a {{format}}. The documentation for the API is available [here]({{documentation_url}}).", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("REST API get request (following Postman example)", "[This JSON]({{postman_example}}) describes an API endpoint call and response. Under the 'request' key in the JSON, you can find all the information needed to call this endpoint yourself. Write a function that calls the endpoint with the parameters {{parameters}} as provided as inputs and returns {{return_response}}.", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("REST API get request (using a cURL request)", "Write a function that calls the API endpoint (described below as a cURL request) with the parameters {{parameters}} as provided as inputs and returns {{return_response}}.\n\n## cURL description\n{{curl_request}}", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Write docstring for function (Google style)", "Write a docstring for the function below. Please use the Google stylesheet as demonstrated in [this example](https://realpython.com/documenting-python-code/#google-docstrings-example).\n\nYou do not need to change the function itself or its returned value.", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Apply PEP8 styling convention to function", "Apply the [PEP8 styling convention](https://www.python.org/dev/peps/pep-0008/) to the code. You may use [this GitHub cheatsheet](https://gist.github.com/RichardBronosky/454964087739a449da04) as a reference.", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Apply PEP8 styling convention", "Apply the [PEP8 styling convention](https://www.python.org/dev/peps/pep-0008/) to the code. You may use [this GitHub cheatsheet](https://gist.github.com/RichardBronosky/454964087739a449da04) as a reference.", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Extract data from document", "Write a function that analyzes a {{document_type}} document and extracts the fields {{requested_fields}} from the document.\n\nReturn the value as a {{format}}.", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Search webpage and scrape results", "Write a function that searches for the query {{query}} on the site [{{site_name}}]({{site_url}}) and scrapes the results of the search. Your function should retrieve the fields {{requested_fields}} and return them as a {{format}}.", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Search a specific webpage", "Write a function that extracts the values of the fields {{requested_fields}} on the site [{{site_name}}]({{site_url}}). Your function should return the result as a {{format}}.", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Extract substring", "Write a function that extracts a substring from string that is given as input. The substring extracted should {{extraction_criteria}}.", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Review whether code requires refactorization", "Review whether the code would benefit from refactorization. If it does, please suggest the modifications in your review.", "REVIEW_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Review whether code meets Python best practices", "Review the code and suggest improvements to make it meet current best practices in Python. If needed, you may follow [this guideline](https://gist.github.com/sloria/7001839).\n\nRemember the [Zen of Python](https://inventwithpython.com/blog/2018/08/17/the-zen-of-python-explained/).", "REVIEW_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Write docstring (Google style)", "Write a docstring for all functions and classes. Please use the Google stylesheet as demonstrated in [this example](https://realpython.com/documenting-python-code/#google-docstrings-example).\n\nYou do not need to change the functions/classes themselves or their functionality.", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Refactor code", "Refactor the code below to make it simpler and more readable.\n\nIn particular, your refactoring should split up large functions, remove duplication/redundancy in the code, and make the code more explicit.\n\nRemember the [Zen of Python](https://inventwithpython.com/blog/2018/08/17/the-zen-of-python-explained/).\n\nThe links [#1](https://sourcery.ai/blog/five-refactoring-tips/), [#2](https://realpython.com/python-refactoring/), and [#3](https://docs.python-guide.org/writing/style/) may be useful.", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Write function output to BigQuery", "Modify the function so it writes it's output into the BigQuery table {{table_name}}.\n\nYou may want to look into [the BigQuery getting started documentation](https://cloud.google.com/docs/authentication/getting-started) or [the BigQuery Python client documentation](https://googleapis.dev/python/bigquery/latest/index.html). You may need to install the package [google-cloud-core](https://pypi.org/project/google-cloud-core/).", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Get data from BigQuery", "Return the data from the table {{table_name}} that fits the criteria {{criteria}}. The table sits in a BigQuery database.\n\nIn order to use BigQuery follow [the BigQuery getting started documentation](https://cloud.google.com/docs/authentication/getting-started) or [the BigQuery Python client documentation](https://googleapis.dev/python/bigquery/latest/index.html). You may need to install the package [google-cloud-core](https://pypi.org/project/google-cloud-core/).", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Write data into BigQuery", "Write a function that {{function_description}}. The output of the function should be written in the table {{table_name}} in BigQuery.\n\nYou may want to look into [the BigQuery getting started documentation](https://cloud.google.com/docs/authentication/getting-started) or [the BigQuery Python client documentation](https://googleapis.dev/python/bigquery/latest/index.html). You may need to install the package [google-cloud-core](https://pypi.org/project/google-cloud-core/).", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Update Flask endpoint function", "Update endpoint function so it receives {{arguments}} as input and returns {{return_value}} as output in {{return_value_format}} format.\nInput arguments should be validated to make sure {{required_arguments}} are provided and types are {{argument_type_map}}.\n\nThe function should fail on {{failure_conditions}}.\nIf the function fails content '{{failure_content}}' and HTTP status {{failure_status}} should be returned as a tuple (`return content, status`).\n\nFlask response docs are [available here](https://flask.palletsprojects.com/en/2.0.x/quickstart/#about-responses).", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Write a unit test to a function", "Add a unit test to the function {{function_name}}. Your unit test should be named test_{{function_name}} and it should test {{optional_test_criteria}} (using Python assert functionality).", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Fix code", "The following code does not work smoothly when {{issue_description}}. Please fix the code.", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Fix function", "The following function does not work smoothly when {{issue_description}}. Please fix the function.", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Create a honeycomb based on an existing function", "The goal of this task is to generalize the function so that it can be used for {{generalization_usage}}. It's essential that the function is written with beautiful and well-organized code according to the [PEP8 styling convention](https://www.python.org/dev/peps/pep-0008/).\n\n1. Please replicate this function to a new function called '{{new_function_name}}'.\n2. This new function should {{generalization_request}}. Your function should include placeholders for {{placeholders_fields}} so it can be reused for various use cases by modifying their values. You may pick the names of the placeholders.\n3. Organize the code of the new function so it clear and have comments in every part of the code.\n4. Add a docstring for the new function. Please use the Google stylesheet as demonstrated in [this example](https://realpython.com/documenting-python-code/#google-docstrings-example).", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Create a honeycomb based on a GitHub repository", "The goal of this task is to use code available on [this reposity in GitHub]({repository_url}) so that it can be used for {{generalization_usage}}. It's essential that the code you write will be beautiful and well-organized according to the [PEP8 styling convention](https://www.python.org/dev/peps/pep-0008/).\n\n1. Please replicate the portion of the repository that {{usage_description}}.\n2. This new code should give credit (in a comment) to the repository.\n3. Your code should include placeholders for {{placeholders_fields}} so it can be reused for various use cases by modifying their values. You may pick the names of the placeholders.\n3. Organize the code so it clear and have comments in every part.\n4. Add docstrings to all the functions you create. Please use the Google stylesheet as demonstrated in [this example](https://realpython.com/documenting-python-code/#google-docstrings-example).", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Add comments to function", "Add comments to the function below. Your comments should be meaningful and either appear to summarize different sections of the code or explain non-trivial functionality. You may follow [this guideline](https://towardsdatascience.com/the-art-of-writing-efficient-code-comments-692213ed71b1).", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Add comments to code selection", "Add comments to the code below. Your comments should be meaningful and either appear to summarize different sections of the code or explain non-trivial functionality. You may follow [this guideline](https://towardsdatascience.com/the-art-of-writing-efficient-code-comments-692213ed71b1).", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Debug function code", "Please debug the function below. You are expected to identify errors in the function and correct them. The code is known to contain errors when {{error_circumstances}}.", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Debug code selection", "Please debug the code below. You are expected to identify errors in the code and correct them. The code is known to contain errors when {{error_circumstances}}.", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Write code that uses an existing function", "Please write {{code_description}}. Your code should be using the existing function provided below.", "UPDATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Write code that uses existing code", "Please write {{code_description}}. You code should be using the existing code provided below.", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Implement code from link/blog post/article", "Please implement the code described in [this link]({{link}}).", "OPEN_TASK");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Implement function from link/blog post/article", "Please implement the code described in [this link]({{link}}).", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Make the component responsive", "Please make this component responsive so it looks reasonable on mobile as well.", "UPDATE_REACT_COMPONENT");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Implement CRUD class", "Please implement CRUD (CREATE, READ, UPDATE and DELETE) operations functionality in Python with {{db_type}} database, operations should use {{database}}.{{table}}. Methods should support inserting a record, reading all records, updating specific record and deleting a record. Connection details are supplied in the task parameters. You can use these {{packages}} dependencies.", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Implement REST API views", "Please implement a REST API using {{framework}}. The data models for this api are {{models}}. URL paths: * method {{http_method}}, path {{path}}, path parameters {{path_params}}, query parameters {{query_params}} http response codes {{response_codes}}, response body {{response_body}}: {{method_description}}", "CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Process csv", "Please read this {{csv}} file, and create an output csv where {{changes_in_csv}}. Save this file to {{csv_path}}.","CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Data validation", "Please create a function that validates {{parameter}}. A valid input should be {{constraints}}. Upon failed validation please {{error_handler}}","CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Schedule job", "Please create a scheduled cron job for the program {{job}}. The cron should run every {{frequency}}.","CREATE_FUNCTION");
INSERT INTO task_template(name, task_description, task_type) VALUES ("Modify collection", "Please modify {{collection}}. The output should be a {{modified_collection}}","UPDATE_FUNCTION");